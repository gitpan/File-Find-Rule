README for File::Find::Rule 0.10

=head1 NAME

File::Find::Rule - Alternative interface to File::Find

=head1 SYNOPSIS

  use File::Find::Rule;
  # find all the subdirectories of a given directory
  my @subdirs = File::Find::Rule->directory->in( $directory );

  # find all the .pm files in @INC
  my @files = File::Find::Rule->file()
                              ->name( '*.pm' )
                              ->in( @INC );

  # as above, but without method chaining
  my $rule =  File::Find::Rule->new;
  $rule->file;
  $rule->name( '*.pm' );
  my @files = $rule->in( @INC );

  # all those arrows - circle the wagons! (the procedural interface)
  my @files = find(file => name => '*.pm', in => \@INC);


=head1 DEPENDENCIES

This module has external dependencies on the following modules:

 Cwd
 File::Find
 File::Spec
 Number::Compare
 Test::More
 Text::Glob

=head1 INSTALLATION

 perl Makefile.PL
 make test

and if all goes well

 make install

=head1 HISTORY

0.10	10th March 2003
	- fixup an accidental warning in the stat-based tests.  Caught
	  by Alex Gough (rt.cpan.org #2138)
	- make the findrule tests more win32 safe/shell independent (picked 
	  up by Philip Newton)
	- autogenerate READMEs from bits and pieces

0.09	21st January 2003
	- Fix to the stat-based tests (spotted by Randal L. Schwartz)
	- implemented our own import sub so we can bootstrap
	  extensions more easily
	- added some documentation about using extensions.

0.08	28th October, 2002
	- ->not_* and implicit s#^\./## (based on suggestions by Tony
	  Bowden)
	- Sketchy first cut of findrule (suggestion from Tatsuhiko Miyagawa)

=head1 AUTHOR

Richard Clamp <richardc@unixbeard.net> with input gained from this
use.perl discussion: http://use.perl.org/~richardc/journal/6467

Additional proofreading and input provided by Kake, Greg McCarroll,
and Andy Lester andy@petdance.com.

=head1 COPYRIGHT

Copyright (C) 2002,2003 Richard Clamp.  All Rights Reserved.

This module is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=head1 SEE ALSO

L<File::Find>, L<Text::Glob>, L<Number::Compare>, find(1)

And if you have an idea for a neat extension
L<File::Find::Rule::Extending>

